Index: smart-g60/vocational/src/main/java/com/pingok/vocational/domain/emergency/TblEventPaln.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pingok.vocational.domain.emergency;\r\n\r\nimport com.alibaba.fastjson.JSONArray;\r\nimport com.fasterxml.jackson.annotation.JsonFormat;\r\n\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Table;\r\nimport javax.persistence.Transient;\r\nimport java.io.Serializable;\r\nimport java.util.Date;\r\n\r\n/**\r\n * 应急预案表(TBL_EVENT_PALN)\r\n * \r\n * @author bianj\r\n * @version 1.0.0 2022-04-02\r\n */\r\n@Table(name = \"TBL_EVENT_PALN\")\r\npublic class TblEventPaln implements Serializable {\r\n    /** 版本号 */\r\n    private static final long serialVersionUID = -8667573461996926767L;\r\n\r\n    /* This code was generated by TableGo tools, mark 1 begin. */\r\n\r\n    /** id */\r\n    @Id\r\n    private Long id;\r\n\r\n    /** 预案标题 */\r\n    private String planTitle;\r\n\r\n    /** 事件类型 */\r\n    private String eventType;\r\n\r\n    /** 预案功能 */\r\n    private String planFunction;\r\n\r\n    /** 使用状态：1.启用 0.停用 */\r\n    private Integer status;\r\n\r\n    /** 创建时间 */\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n    private Date createTime;\r\n\r\n    /** 更新时间 */\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n    private Date updateTime;\r\n\r\n    /** 创建用户ID */\r\n    private Long createUserId;\r\n\r\n    /** 更新用户ID */\r\n    private Long updateUserId;\r\n\r\n    @Transient\r\n    private JSONArray planFunctionList;\r\n    @Transient\r\n    private JSONArray eventTypeList;\r\n\r\n    /* This code was generated by TableGo tools, mark 1 end. */\r\n\r\n    /* This code was generated by TableGo tools, mark 2 begin. */\r\n\r\n    /**\r\n     * 获取id\r\n     * \r\n     * @return id\r\n     */\r\n    public Long getId() {\r\n        return this.id;\r\n    }\r\n\r\n    /**\r\n     * 设置id\r\n     * \r\n     * @param id\r\n     */\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * 获取预案标题\r\n     * \r\n     * @return 预案标题\r\n     */\r\n    public String getPlanTitle() {\r\n        return this.planTitle;\r\n    }\r\n\r\n    /**\r\n     * 设置预案标题\r\n     * \r\n     * @param planTitle\r\n     *          预案标题\r\n     */\r\n    public void setPlanTitle(String planTitle) {\r\n        this.planTitle = planTitle;\r\n    }\r\n\r\n    /**\r\n     * 获取事件类型\r\n     * \r\n     * @return 事件类型\r\n     */\r\n    public String getEventType() {\r\n        return this.eventType;\r\n    }\r\n\r\n    /**\r\n     * 设置事件类型\r\n     * \r\n     * @param eventType\r\n     *          事件类型\r\n     */\r\n    public void setEventType(String eventType) {\r\n        this.eventType = eventType;\r\n    }\r\n\r\n    /**\r\n     * 获取预案功能\r\n     * \r\n     * @return 预案功能\r\n     */\r\n    public String getPlanFunction() {\r\n        return this.planFunction;\r\n    }\r\n\r\n    /**\r\n     * 设置预案功能\r\n     * \r\n     * @param planFunction\r\n     *          预案功能\r\n     */\r\n    public void setPlanFunction(String planFunction) {\r\n        this.planFunction = planFunction;\r\n    }\r\n\r\n    /**\r\n     * 获取使用状态：1.启用 0.停用\r\n     * \r\n     * @return 使用状态\r\n     */\r\n    public Integer getStatus() {\r\n        return this.status;\r\n    }\r\n\r\n    /**\r\n     * 设置使用状态：1.启用 0.停用\r\n     * \r\n     * @param status\r\n     *          使用状态\r\n     */\r\n    public void setStatus(Integer status) {\r\n        this.status = status;\r\n    }\r\n\r\n    /**\r\n     * 获取创建时间\r\n     * \r\n     * @return 创建时间\r\n     */\r\n    public Date getCreateTime() {\r\n        return this.createTime;\r\n    }\r\n\r\n    /**\r\n     * 设置创建时间\r\n     * \r\n     * @param createTime\r\n     *          创建时间\r\n     */\r\n    public void setCreateTime(Date createTime) {\r\n        this.createTime = createTime;\r\n    }\r\n\r\n    /**\r\n     * 获取更新时间\r\n     * \r\n     * @return 更新时间\r\n     */\r\n    public Date getUpdateTime() {\r\n        return this.updateTime;\r\n    }\r\n\r\n    /**\r\n     * 设置更新时间\r\n     * \r\n     * @param updateTime\r\n     *          更新时间\r\n     */\r\n    public void setUpdateTime(Date updateTime) {\r\n        this.updateTime = updateTime;\r\n    }\r\n\r\n    /**\r\n     * 获取创建用户ID\r\n     * \r\n     * @return 创建用户ID\r\n     */\r\n    public Long getCreateUserId() {\r\n        return this.createUserId;\r\n    }\r\n\r\n    /**\r\n     * 设置创建用户ID\r\n     * \r\n     * @param createUserId\r\n     *          创建用户ID\r\n     */\r\n    public void setCreateUserId(Long createUserId) {\r\n        this.createUserId = createUserId;\r\n    }\r\n\r\n    /**\r\n     * 获取更新用户ID\r\n     * \r\n     * @return 更新用户ID\r\n     */\r\n    public Long getUpdateUserId() {\r\n        return this.updateUserId;\r\n    }\r\n\r\n    /**\r\n     * 设置更新用户ID\r\n     * \r\n     * @param updateUserId\r\n     *          更新用户ID\r\n     */\r\n    public void setUpdateUserId(Long updateUserId) {\r\n        this.updateUserId = updateUserId;\r\n    }\r\n\r\n    public JSONArray getPlanFunctionList() {\r\n        return planFunctionList;\r\n    }\r\n\r\n    public void setPlanFunctionList(JSONArray planFunctionList) {\r\n        this.planFunctionList = planFunctionList;\r\n    }\r\n\r\n    public JSONArray getEventTypeList() {\r\n        return eventTypeList;\r\n    }\r\n\r\n    public void setEventTypeList(JSONArray eventTypeList) {\r\n        this.eventTypeList = eventTypeList;\r\n    }\r\n\r\n    /* This code was generated by TableGo tools, mark 2 end. */\r\n}
===================================================================
diff --git a/smart-g60/vocational/src/main/java/com/pingok/vocational/domain/emergency/TblEventPaln.java b/smart-g60/vocational/src/main/java/com/pingok/vocational/domain/emergency/TblEventPaln.java
--- a/smart-g60/vocational/src/main/java/com/pingok/vocational/domain/emergency/TblEventPaln.java	
+++ b/smart-g60/vocational/src/main/java/com/pingok/vocational/domain/emergency/TblEventPaln.java	
@@ -12,7 +12,7 @@
 /**
  * 应急预案表(TBL_EVENT_PALN)
  * 
- * @author bianj
+ * @author qiumin
  * @version 1.0.0 2022-04-02
  */
 @Table(name = "TBL_EVENT_PALN")
Index: smart-g60/vod/src/main/java/com/pingok/vod/service/impl/MonitorPresetServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pingok.vod.service.impl;\r\n\r\nimport cn.hutool.http.HttpUtil;\r\nimport com.alibaba.fastjson.JSONArray;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.pingok.vod.domain.TblDeviceInfo;\r\nimport com.pingok.vod.domain.TblMonitorPreset;\r\nimport com.pingok.vod.mapper.TblMonitorPresetMapper;\r\nimport com.pingok.vod.service.IDeviceInfoService;\r\nimport com.pingok.vod.service.IMonitorPresetService;\r\nimport com.ruoyi.common.core.utils.DateUtils;\r\nimport com.ruoyi.common.core.utils.IdUtils;\r\nimport com.ruoyi.common.core.utils.StringUtils;\r\nimport com.ruoyi.common.security.utils.SecurityUtils;\r\nimport com.ruoyi.system.api.RemoteIdProducerService;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.stereotype.Service;\r\nimport tk.mybatis.mapper.entity.Example;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\n\r\n/**\r\n * 设备信息 服务层处理\r\n *\r\n * @author qiumin\r\n */\r\n@Slf4j\r\n@Service\r\npublic class MonitorPresetServiceImpl implements IMonitorPresetService {\r\n\r\n    @Value(\"${vod.host}\")\r\n    private String host;\r\n\r\n    @Value(\"${vod.user}\")\r\n    private String user;\r\n\r\n    @Value(\"${vod.pwd}\")\r\n    private String pwd;\r\n\r\n    @Autowired\r\n    private TblMonitorPresetMapper tblMonitorPresetMapper;\r\n    @Autowired\r\n    private RemoteIdProducerService remoteIdProducerService;\r\n    @Autowired\r\n    private IDeviceInfoService iDeviceInfoService;\r\n\r\n    @Override\r\n    public JSONArray getCameraStatus() {\r\n        HashMap<String, Object> paramMap = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"get_camera_status_request\");\r\n        HashMap<String, Object> retHeader = new HashMap<>();\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        JSONArray cameraStatus = null;\r\n        JSONObject ret;\r\n        if (!StringUtils.isEmpty(post)) {\r\n            ret = JSONObject.parseObject(post);\r\n            if (ret.getJSONObject(\"ret_header\").containsKey(\"code\") && ret.getJSONObject(\"ret_header\").getString(\"code\").equals(\"0\")) {\r\n                cameraStatus = ret.getJSONObject(\"ret_body\").getJSONArray(\"camera_status_list\");\r\n\r\n            }\r\n        }\r\n        return cameraStatus;\r\n    }\r\n\r\n    @Override\r\n    public JSONObject getVodCurtime(Long id) {\r\n        JSONObject r = new JSONObject();\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        paramMap = new HashMap<>();\r\n        retHeader = new HashMap<>();\r\n        retBody = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"get_vod_curtime_request\");\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        retBody.put(\"session_id\", id);\r\n        paramMap.put(\"req_body\", retBody);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        if (!StringUtils.isEmpty(post)) {\r\n            JSONObject req = JSONObject.parseObject(post);\r\n            r.put(\"code\", req.getJSONObject(\"ret_header\").getIntValue(\"code\"));\r\n            r.put(\"msg\", req.getJSONObject(\"ret_header\").getString(\"msg\"));\r\n            if (req.getJSONObject(\"ret_header\").containsKey(\"code\") && req.getJSONObject(\"ret_header\").getString(\"code\").equals(\"0\")) {\r\n                r.put(\"curTime\", req.getJSONObject(\"ret_body\").getString(\"session_id\"));\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    @Override\r\n    public JSONObject vodControl(Long id, String type, Integer playSpeed, String seekTime) {\r\n        JSONObject r = new JSONObject();\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        paramMap = new HashMap<>();\r\n        retHeader = new HashMap<>();\r\n        retBody = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"vod_control_request\");\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        retBody.put(\"session_id\", id);\r\n        retBody.put(\"control_type\", type);\r\n        retBody.put(\"play_speed\", playSpeed);\r\n        retBody.put(\"seek_time\", seekTime);\r\n        paramMap.put(\"req_body\", retBody);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        if (!StringUtils.isEmpty(post)) {\r\n            JSONObject req = JSONObject.parseObject(post);\r\n            r.put(\"code\", req.getJSONObject(\"ret_header\").getIntValue(\"code\"));\r\n            r.put(\"msg\", req.getJSONObject(\"ret_header\").getString(\"msg\"));\r\n        }\r\n        return r;\r\n    }\r\n\r\n    @Override\r\n    public JSONObject stopVod(Long id) {\r\n        JSONObject r = new JSONObject();\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        paramMap = new HashMap<>();\r\n        retHeader = new HashMap<>();\r\n        retBody = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"stop_vod_request\");\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        retBody.put(\"session_id\", id);\r\n        paramMap.put(\"req_body\", retBody);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        if (!StringUtils.isEmpty(post)) {\r\n            JSONObject req = JSONObject.parseObject(post);\r\n            r.put(\"code\", req.getJSONObject(\"ret_header\").getIntValue(\"code\"));\r\n            r.put(\"msg\", req.getJSONObject(\"ret_header\").getString(\"msg\"));\r\n        }\r\n        return r;\r\n    }\r\n\r\n    @Override\r\n    public JSONObject startVod(Long id, String start, String end) {\r\n        JSONObject r = new JSONObject();\r\n        TblDeviceInfo tblDeviceInfo = iDeviceInfoService.findById(id);\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        paramMap = new HashMap<>();\r\n        retHeader = new HashMap<>();\r\n        retBody = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"start_vod_request\");\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        retBody.put(\"camera_id\", Integer.valueOf(tblDeviceInfo.getDeviceId()));\r\n        retBody.put(\"start_time\", start);\r\n        retBody.put(\"end_time\", end);\r\n        paramMap.put(\"req_body\", retBody);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        if (!StringUtils.isEmpty(post)) {\r\n            JSONObject req = JSONObject.parseObject(post);\r\n            r.put(\"code\", req.getJSONObject(\"ret_header\").getIntValue(\"code\"));\r\n            r.put(\"msg\", req.getJSONObject(\"ret_header\").getString(\"msg\"));\r\n            if (req.getJSONObject(\"ret_header\").containsKey(\"code\") && req.getJSONObject(\"ret_header\").getString(\"code\").equals(\"0\")) {\r\n                streamAlive(req.getJSONObject(\"ret_body\").getInteger(\"session_id\"));\r\n                r.put(\"sessionId\", req.getJSONObject(\"ret_body\").getString(\"session_id\"));\r\n                r.put(\"url\", req.getJSONObject(\"ret_body\").getString(\"vod_hls_url\"));\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    @Override\r\n    public JSONArray getRecordList(Long id, String startTime, String endTime) {\r\n        JSONArray r = new JSONArray();\r\n        TblDeviceInfo tblDeviceInfo = iDeviceInfoService.findById(id);\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        paramMap = new HashMap<>();\r\n        retHeader = new HashMap<>();\r\n        retBody = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"get_record_list_request\");\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        retBody.put(\"camera_id\", Integer.valueOf(tblDeviceInfo.getDeviceId()));\r\n        retBody.put(\"start_time\", startTime);\r\n        retBody.put(\"end_time\", endTime);\r\n        paramMap.put(\"req_body\", retBody);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        if (!StringUtils.isEmpty(post)) {\r\n            JSONObject req = JSONObject.parseObject(post);\r\n            if (req.getJSONObject(\"ret_header\").containsKey(\"code\") && req.getJSONObject(\"ret_header\").getString(\"code\").equals(\"0\")) {\r\n                r = req.getJSONObject(\"ret_body\").getJSONArray(\"record_list\");\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    @Override\r\n    public JSONObject ptzControl(Long id, String type, Integer param) {\r\n        JSONObject r = new JSONObject();\r\n        TblDeviceInfo tblDeviceInfo = iDeviceInfoService.findById(id);\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        paramMap = new HashMap<>();\r\n        retHeader = new HashMap<>();\r\n        retBody = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"ptz_control_request\");\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        retBody.put(\"camera_id\", Integer.valueOf(tblDeviceInfo.getDeviceId()));\r\n        retBody.put(\"ptz_control_type\", type);\r\n        retBody.put(\"ptz_param1\", param);\r\n        retBody.put(\"ptz_param2\", 0);\r\n        retBody.put(\"ptz_param3\", 0);\r\n        retBody.put(\"ptz_param4\", 0);\r\n        paramMap.put(\"req_body\", retBody);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        if (!StringUtils.isEmpty(post)) {\r\n            JSONObject req = JSONObject.parseObject(post);\r\n            r.put(\"code\", req.getJSONObject(\"ret_header\").getIntValue(\"code\"));\r\n            r.put(\"msg\", req.getJSONObject(\"ret_header\").getString(\"msg\"));\r\n        }\r\n        return r;\r\n    }\r\n\r\n    @Override\r\n    public void stopLive(List<Long> ids) {\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        String post = null;\r\n        JSONObject req;\r\n        TblDeviceInfo tblDeviceInfo;\r\n        Integer cameraId = null;\r\n        for (Long o : ids) {\r\n            tblDeviceInfo = iDeviceInfoService.findById(o);\r\n            cameraId = Integer.parseInt(tblDeviceInfo.getDeviceId());\r\n            paramMap = new HashMap<>();\r\n            retHeader = new HashMap<>();\r\n            retBody = new HashMap<>();\r\n            paramMap.put(\"req_type\", \"stop_live_request\");\r\n            retHeader.put(\"guid\", IdUtils.fastUUID());\r\n            retHeader.put(\"user\", user);\r\n            retHeader.put(\"pwd\", pwd);\r\n            paramMap.put(\"req_header\", retHeader);\r\n            retBody.put(\"camera_id\", cameraId);\r\n            paramMap.put(\"req_body\", retBody);\r\n            post = HttpUtil.post(host, paramMap);\r\n            if (!StringUtils.isEmpty(post)) {\r\n                req = JSONObject.parseObject(post);\r\n                if (!req.getJSONObject(\"ret_header\").containsKey(\"code\") || !req.getJSONObject(\"ret_header\").getString(\"code\").equals(\"0\")) {\r\n                    log.error(\"设备编号为：\" + cameraId + \" 的相机结束实时视频失败，错误：\" + req.getJSONObject(\"ret_header\").getString(\"msg\"));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public JSONArray startLive(List<Long> ids) {\r\n        JSONArray liveUrls = new JSONArray();\r\n        JSONObject liveUrl;\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        String post = null;\r\n        JSONObject req;\r\n        JSONObject reqBody;\r\n        TblDeviceInfo tblDeviceInfo;\r\n        Integer cameraId = null;\r\n        for (Long o : ids) {\r\n            tblDeviceInfo = iDeviceInfoService.findById(o);\r\n            cameraId = Integer.parseInt(tblDeviceInfo.getDeviceId());\r\n            paramMap = new HashMap<>();\r\n            retHeader = new HashMap<>();\r\n            retBody = new HashMap<>();\r\n            paramMap.put(\"req_type\", \"start_live_request\");\r\n            retHeader.put(\"guid\", IdUtils.fastUUID());\r\n            retHeader.put(\"user\", user);\r\n            retHeader.put(\"pwd\", pwd);\r\n            paramMap.put(\"req_header\", retHeader);\r\n            retBody.put(\"camera_id\", cameraId);\r\n            paramMap.put(\"req_body\", retBody);\r\n            post = HttpUtil.post(host, paramMap);\r\n            if (!StringUtils.isEmpty(post)) {\r\n                req = JSONObject.parseObject(post);\r\n                if (req.getJSONObject(\"ret_header\").containsKey(\"code\") && req.getJSONObject(\"ret_header\").getString(\"code\").equals(\"0\")) {\r\n                    streamAlive(cameraId);\r\n                    reqBody = req.getJSONObject(\"ret_body\");\r\n                    liveUrl = new JSONObject();\r\n                    liveUrl.put(\"id\", o);\r\n                    liveUrl.put(\"url\", reqBody.getString(\"live_flv_url\"));\r\n                    liveUrls.add(liveUrl);\r\n                } else {\r\n                    log.error(\"设备编号为：\" + cameraId + \" 的相机开始实时视频失败，错误：\" + req.getJSONObject(\"ret_header\").getString(\"msg\"));\r\n                }\r\n            }\r\n        }\r\n        return liveUrls;\r\n    }\r\n\r\n    @Override\r\n    public void bind(TblMonitorPreset tblMonitorPreset) {\r\n        Example example = new Example(TblMonitorPreset.class);\r\n        Example.Criteria criteria = example.createCriteria();\r\n        criteria.andEqualTo(\"userId\", SecurityUtils.getUserId());\r\n        List<TblMonitorPreset> tblMonitorPresets = tblMonitorPresetMapper.selectByExample(example);\r\n        if (tblMonitorPresets != null && tblMonitorPresets.size() > 0) {\r\n            for (TblMonitorPreset m : tblMonitorPresets) {\r\n                tblMonitorPresetMapper.delete(m);\r\n            }\r\n        }\r\n        if (tblMonitorPreset.getIds() != null && tblMonitorPreset.getIds().size() > 0) {\r\n            List<Long> deviceIds = tblMonitorPreset.getIds();\r\n            TblMonitorPreset m;\r\n            for (Long id : deviceIds) {\r\n                m = new TblMonitorPreset();\r\n                m.setId(remoteIdProducerService.nextId());\r\n                m.setUserId(SecurityUtils.getUserId());\r\n                m.setDeviceId(id);\r\n                m.setCreateTime(DateUtils.getNowDate());\r\n                tblMonitorPresetMapper.insert(m);\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<Object> findByUserId() {\r\n        return tblMonitorPresetMapper.findByUserId(SecurityUtils.getUserId());\r\n    }\r\n\r\n    @Override\r\n    public JSONArray getCameraList() {\r\n        HashMap<String, Object> paramMap = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"get_camera_request\");\r\n        HashMap<String, Object> retHeader = new HashMap<>();\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        JSONArray cameraList = null;\r\n        JSONObject ret;\r\n        if (!StringUtils.isEmpty(post)) {\r\n            ret = JSONObject.parseObject(post);\r\n            if (ret.getJSONObject(\"ret_header\").containsKey(\"code\") && ret.getJSONObject(\"ret_header\").getString(\"code\").equals(\"0\")) {\r\n                cameraList = ret.getJSONObject(\"ret_body\").getJSONArray(\"camera_list\");\r\n\r\n            }\r\n        }\r\n        return cameraList;\r\n    }\r\n\r\n    private void streamAlive(Integer id) {\r\n        HashMap<String, Object> paramMap;\r\n        HashMap<String, Object> retHeader;\r\n        HashMap<String, Object> retBody;\r\n        paramMap = new HashMap<>();\r\n        retHeader = new HashMap<>();\r\n        retBody = new HashMap<>();\r\n        paramMap.put(\"req_type\", \"stream_alive_request\");\r\n        retHeader.put(\"guid\", IdUtils.fastUUID());\r\n        retHeader.put(\"user\", user);\r\n        retHeader.put(\"pwd\", pwd);\r\n        paramMap.put(\"req_header\", retHeader);\r\n        retBody.put(\"id\", id);\r\n        paramMap.put(\"req_body\", retBody);\r\n        String post = HttpUtil.post(host, paramMap);\r\n        if (!StringUtils.isEmpty(post)) {\r\n            JSONObject req = JSONObject.parseObject(post);\r\n            if (!req.getJSONObject(\"ret_header\").containsKey(\"code\") || !req.getJSONObject(\"ret_header\").getString(\"code\").equals(\"0\")) {\r\n                log.error(\"设备编号为：\" + id + \" 的相机视频码流保活失败，错误：\" + req.getJSONObject(\"ret_header\").getString(\"msg\"));\r\n            }\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/smart-g60/vod/src/main/java/com/pingok/vod/service/impl/MonitorPresetServiceImpl.java b/smart-g60/vod/src/main/java/com/pingok/vod/service/impl/MonitorPresetServiceImpl.java
--- a/smart-g60/vod/src/main/java/com/pingok/vod/service/impl/MonitorPresetServiceImpl.java	
+++ b/smart-g60/vod/src/main/java/com/pingok/vod/service/impl/MonitorPresetServiceImpl.java	
@@ -1,395 +1,0 @@
-package com.pingok.vod.service.impl;
-
-import cn.hutool.http.HttpUtil;
-import com.alibaba.fastjson.JSONArray;
-import com.alibaba.fastjson.JSONObject;
-import com.pingok.vod.domain.TblDeviceInfo;
-import com.pingok.vod.domain.TblMonitorPreset;
-import com.pingok.vod.mapper.TblMonitorPresetMapper;
-import com.pingok.vod.service.IDeviceInfoService;
-import com.pingok.vod.service.IMonitorPresetService;
-import com.ruoyi.common.core.utils.DateUtils;
-import com.ruoyi.common.core.utils.IdUtils;
-import com.ruoyi.common.core.utils.StringUtils;
-import com.ruoyi.common.security.utils.SecurityUtils;
-import com.ruoyi.system.api.RemoteIdProducerService;
-import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.stereotype.Service;
-import tk.mybatis.mapper.entity.Example;
-
-import java.util.HashMap;
-import java.util.List;
-
-/**
- * 设备信息 服务层处理
- *
- * @author qiumin
- */
-@Slf4j
-@Service
-public class MonitorPresetServiceImpl implements IMonitorPresetService {
-
-    @Value("${vod.host}")
-    private String host;
-
-    @Value("${vod.user}")
-    private String user;
-
-    @Value("${vod.pwd}")
-    private String pwd;
-
-    @Autowired
-    private TblMonitorPresetMapper tblMonitorPresetMapper;
-    @Autowired
-    private RemoteIdProducerService remoteIdProducerService;
-    @Autowired
-    private IDeviceInfoService iDeviceInfoService;
-
-    @Override
-    public JSONArray getCameraStatus() {
-        HashMap<String, Object> paramMap = new HashMap<>();
-        paramMap.put("req_type", "get_camera_status_request");
-        HashMap<String, Object> retHeader = new HashMap<>();
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        String post = HttpUtil.post(host, paramMap);
-        JSONArray cameraStatus = null;
-        JSONObject ret;
-        if (!StringUtils.isEmpty(post)) {
-            ret = JSONObject.parseObject(post);
-            if (ret.getJSONObject("ret_header").containsKey("code") && ret.getJSONObject("ret_header").getString("code").equals("0")) {
-                cameraStatus = ret.getJSONObject("ret_body").getJSONArray("camera_status_list");
-
-            }
-        }
-        return cameraStatus;
-    }
-
-    @Override
-    public JSONObject getVodCurtime(Long id) {
-        JSONObject r = new JSONObject();
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        paramMap = new HashMap<>();
-        retHeader = new HashMap<>();
-        retBody = new HashMap<>();
-        paramMap.put("req_type", "get_vod_curtime_request");
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        retBody.put("session_id", id);
-        paramMap.put("req_body", retBody);
-        String post = HttpUtil.post(host, paramMap);
-        if (!StringUtils.isEmpty(post)) {
-            JSONObject req = JSONObject.parseObject(post);
-            r.put("code", req.getJSONObject("ret_header").getIntValue("code"));
-            r.put("msg", req.getJSONObject("ret_header").getString("msg"));
-            if (req.getJSONObject("ret_header").containsKey("code") && req.getJSONObject("ret_header").getString("code").equals("0")) {
-                r.put("curTime", req.getJSONObject("ret_body").getString("session_id"));
-            }
-        }
-        return r;
-    }
-
-    @Override
-    public JSONObject vodControl(Long id, String type, Integer playSpeed, String seekTime) {
-        JSONObject r = new JSONObject();
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        paramMap = new HashMap<>();
-        retHeader = new HashMap<>();
-        retBody = new HashMap<>();
-        paramMap.put("req_type", "vod_control_request");
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        retBody.put("session_id", id);
-        retBody.put("control_type", type);
-        retBody.put("play_speed", playSpeed);
-        retBody.put("seek_time", seekTime);
-        paramMap.put("req_body", retBody);
-        String post = HttpUtil.post(host, paramMap);
-        if (!StringUtils.isEmpty(post)) {
-            JSONObject req = JSONObject.parseObject(post);
-            r.put("code", req.getJSONObject("ret_header").getIntValue("code"));
-            r.put("msg", req.getJSONObject("ret_header").getString("msg"));
-        }
-        return r;
-    }
-
-    @Override
-    public JSONObject stopVod(Long id) {
-        JSONObject r = new JSONObject();
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        paramMap = new HashMap<>();
-        retHeader = new HashMap<>();
-        retBody = new HashMap<>();
-        paramMap.put("req_type", "stop_vod_request");
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        retBody.put("session_id", id);
-        paramMap.put("req_body", retBody);
-        String post = HttpUtil.post(host, paramMap);
-        if (!StringUtils.isEmpty(post)) {
-            JSONObject req = JSONObject.parseObject(post);
-            r.put("code", req.getJSONObject("ret_header").getIntValue("code"));
-            r.put("msg", req.getJSONObject("ret_header").getString("msg"));
-        }
-        return r;
-    }
-
-    @Override
-    public JSONObject startVod(Long id, String start, String end) {
-        JSONObject r = new JSONObject();
-        TblDeviceInfo tblDeviceInfo = iDeviceInfoService.findById(id);
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        paramMap = new HashMap<>();
-        retHeader = new HashMap<>();
-        retBody = new HashMap<>();
-        paramMap.put("req_type", "start_vod_request");
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        retBody.put("camera_id", Integer.valueOf(tblDeviceInfo.getDeviceId()));
-        retBody.put("start_time", start);
-        retBody.put("end_time", end);
-        paramMap.put("req_body", retBody);
-        String post = HttpUtil.post(host, paramMap);
-        if (!StringUtils.isEmpty(post)) {
-            JSONObject req = JSONObject.parseObject(post);
-            r.put("code", req.getJSONObject("ret_header").getIntValue("code"));
-            r.put("msg", req.getJSONObject("ret_header").getString("msg"));
-            if (req.getJSONObject("ret_header").containsKey("code") && req.getJSONObject("ret_header").getString("code").equals("0")) {
-                streamAlive(req.getJSONObject("ret_body").getInteger("session_id"));
-                r.put("sessionId", req.getJSONObject("ret_body").getString("session_id"));
-                r.put("url", req.getJSONObject("ret_body").getString("vod_hls_url"));
-            }
-        }
-        return r;
-    }
-
-    @Override
-    public JSONArray getRecordList(Long id, String startTime, String endTime) {
-        JSONArray r = new JSONArray();
-        TblDeviceInfo tblDeviceInfo = iDeviceInfoService.findById(id);
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        paramMap = new HashMap<>();
-        retHeader = new HashMap<>();
-        retBody = new HashMap<>();
-        paramMap.put("req_type", "get_record_list_request");
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        retBody.put("camera_id", Integer.valueOf(tblDeviceInfo.getDeviceId()));
-        retBody.put("start_time", startTime);
-        retBody.put("end_time", endTime);
-        paramMap.put("req_body", retBody);
-        String post = HttpUtil.post(host, paramMap);
-        if (!StringUtils.isEmpty(post)) {
-            JSONObject req = JSONObject.parseObject(post);
-            if (req.getJSONObject("ret_header").containsKey("code") && req.getJSONObject("ret_header").getString("code").equals("0")) {
-                r = req.getJSONObject("ret_body").getJSONArray("record_list");
-            }
-        }
-        return r;
-    }
-
-    @Override
-    public JSONObject ptzControl(Long id, String type, Integer param) {
-        JSONObject r = new JSONObject();
-        TblDeviceInfo tblDeviceInfo = iDeviceInfoService.findById(id);
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        paramMap = new HashMap<>();
-        retHeader = new HashMap<>();
-        retBody = new HashMap<>();
-        paramMap.put("req_type", "ptz_control_request");
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        retBody.put("camera_id", Integer.valueOf(tblDeviceInfo.getDeviceId()));
-        retBody.put("ptz_control_type", type);
-        retBody.put("ptz_param1", param);
-        retBody.put("ptz_param2", 0);
-        retBody.put("ptz_param3", 0);
-        retBody.put("ptz_param4", 0);
-        paramMap.put("req_body", retBody);
-        String post = HttpUtil.post(host, paramMap);
-        if (!StringUtils.isEmpty(post)) {
-            JSONObject req = JSONObject.parseObject(post);
-            r.put("code", req.getJSONObject("ret_header").getIntValue("code"));
-            r.put("msg", req.getJSONObject("ret_header").getString("msg"));
-        }
-        return r;
-    }
-
-    @Override
-    public void stopLive(List<Long> ids) {
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        String post = null;
-        JSONObject req;
-        TblDeviceInfo tblDeviceInfo;
-        Integer cameraId = null;
-        for (Long o : ids) {
-            tblDeviceInfo = iDeviceInfoService.findById(o);
-            cameraId = Integer.parseInt(tblDeviceInfo.getDeviceId());
-            paramMap = new HashMap<>();
-            retHeader = new HashMap<>();
-            retBody = new HashMap<>();
-            paramMap.put("req_type", "stop_live_request");
-            retHeader.put("guid", IdUtils.fastUUID());
-            retHeader.put("user", user);
-            retHeader.put("pwd", pwd);
-            paramMap.put("req_header", retHeader);
-            retBody.put("camera_id", cameraId);
-            paramMap.put("req_body", retBody);
-            post = HttpUtil.post(host, paramMap);
-            if (!StringUtils.isEmpty(post)) {
-                req = JSONObject.parseObject(post);
-                if (!req.getJSONObject("ret_header").containsKey("code") || !req.getJSONObject("ret_header").getString("code").equals("0")) {
-                    log.error("设备编号为：" + cameraId + " 的相机结束实时视频失败，错误：" + req.getJSONObject("ret_header").getString("msg"));
-                }
-            }
-        }
-    }
-
-    @Override
-    public JSONArray startLive(List<Long> ids) {
-        JSONArray liveUrls = new JSONArray();
-        JSONObject liveUrl;
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        String post = null;
-        JSONObject req;
-        JSONObject reqBody;
-        TblDeviceInfo tblDeviceInfo;
-        Integer cameraId = null;
-        for (Long o : ids) {
-            tblDeviceInfo = iDeviceInfoService.findById(o);
-            cameraId = Integer.parseInt(tblDeviceInfo.getDeviceId());
-            paramMap = new HashMap<>();
-            retHeader = new HashMap<>();
-            retBody = new HashMap<>();
-            paramMap.put("req_type", "start_live_request");
-            retHeader.put("guid", IdUtils.fastUUID());
-            retHeader.put("user", user);
-            retHeader.put("pwd", pwd);
-            paramMap.put("req_header", retHeader);
-            retBody.put("camera_id", cameraId);
-            paramMap.put("req_body", retBody);
-            post = HttpUtil.post(host, paramMap);
-            if (!StringUtils.isEmpty(post)) {
-                req = JSONObject.parseObject(post);
-                if (req.getJSONObject("ret_header").containsKey("code") && req.getJSONObject("ret_header").getString("code").equals("0")) {
-                    streamAlive(cameraId);
-                    reqBody = req.getJSONObject("ret_body");
-                    liveUrl = new JSONObject();
-                    liveUrl.put("id", o);
-                    liveUrl.put("url", reqBody.getString("live_flv_url"));
-                    liveUrls.add(liveUrl);
-                } else {
-                    log.error("设备编号为：" + cameraId + " 的相机开始实时视频失败，错误：" + req.getJSONObject("ret_header").getString("msg"));
-                }
-            }
-        }
-        return liveUrls;
-    }
-
-    @Override
-    public void bind(TblMonitorPreset tblMonitorPreset) {
-        Example example = new Example(TblMonitorPreset.class);
-        Example.Criteria criteria = example.createCriteria();
-        criteria.andEqualTo("userId", SecurityUtils.getUserId());
-        List<TblMonitorPreset> tblMonitorPresets = tblMonitorPresetMapper.selectByExample(example);
-        if (tblMonitorPresets != null && tblMonitorPresets.size() > 0) {
-            for (TblMonitorPreset m : tblMonitorPresets) {
-                tblMonitorPresetMapper.delete(m);
-            }
-        }
-        if (tblMonitorPreset.getIds() != null && tblMonitorPreset.getIds().size() > 0) {
-            List<Long> deviceIds = tblMonitorPreset.getIds();
-            TblMonitorPreset m;
-            for (Long id : deviceIds) {
-                m = new TblMonitorPreset();
-                m.setId(remoteIdProducerService.nextId());
-                m.setUserId(SecurityUtils.getUserId());
-                m.setDeviceId(id);
-                m.setCreateTime(DateUtils.getNowDate());
-                tblMonitorPresetMapper.insert(m);
-            }
-        }
-    }
-
-    @Override
-    public List<Object> findByUserId() {
-        return tblMonitorPresetMapper.findByUserId(SecurityUtils.getUserId());
-    }
-
-    @Override
-    public JSONArray getCameraList() {
-        HashMap<String, Object> paramMap = new HashMap<>();
-        paramMap.put("req_type", "get_camera_request");
-        HashMap<String, Object> retHeader = new HashMap<>();
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        String post = HttpUtil.post(host, paramMap);
-        JSONArray cameraList = null;
-        JSONObject ret;
-        if (!StringUtils.isEmpty(post)) {
-            ret = JSONObject.parseObject(post);
-            if (ret.getJSONObject("ret_header").containsKey("code") && ret.getJSONObject("ret_header").getString("code").equals("0")) {
-                cameraList = ret.getJSONObject("ret_body").getJSONArray("camera_list");
-
-            }
-        }
-        return cameraList;
-    }
-
-    private void streamAlive(Integer id) {
-        HashMap<String, Object> paramMap;
-        HashMap<String, Object> retHeader;
-        HashMap<String, Object> retBody;
-        paramMap = new HashMap<>();
-        retHeader = new HashMap<>();
-        retBody = new HashMap<>();
-        paramMap.put("req_type", "stream_alive_request");
-        retHeader.put("guid", IdUtils.fastUUID());
-        retHeader.put("user", user);
-        retHeader.put("pwd", pwd);
-        paramMap.put("req_header", retHeader);
-        retBody.put("id", id);
-        paramMap.put("req_body", retBody);
-        String post = HttpUtil.post(host, paramMap);
-        if (!StringUtils.isEmpty(post)) {
-            JSONObject req = JSONObject.parseObject(post);
-            if (!req.getJSONObject("ret_header").containsKey("code") || !req.getJSONObject("ret_header").getString("code").equals("0")) {
-                log.error("设备编号为：" + id + " 的相机视频码流保活失败，错误：" + req.getJSONObject("ret_header").getString("msg"));
-            }
-        }
-    }
-}
Index: smart-g60/vocational/src/main/java/com/pingok/vocational/mapper/emergency/field/TblFieldInfoMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pingok.vocational.mapper.emergency.field;\r\n\r\nimport com.pingok.vocational.domain.field.TblFieldInfo;\r\nimport com.ruoyi.common.core.mapper.CommonRepository;\r\nimport org.apache.ibatis.annotations.Param;\r\nimport org.apache.ibatis.annotations.Select;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * TBL_FIELD_INFO 数据层\r\n *\r\n * @author xia\r\n */\r\npublic interface TblFieldInfoMapper extends CommonRepository<TblFieldInfo> {\r\n\r\n    @Select({\"<script>\" +\r\n            \"select a.ID as \\\"id\\\",\" +\r\n            \"a.FIELD_NAME as \\\"fieldName\\\",\" +\r\n            \"case a.TYPE when 1 then '停车场' when 2 then '仓库' when 3 then '机房' else '错误场地类型' end as \\\"parentCategory\\\",\" +\r\n            \"case a.ROAD_BELONG when '08' then '沪杭' when '09' then '沪渝' when '04' then '沪金' else '其他路段' end as \\\"roadBelong\\\" ,\" +\r\n            \"b.STATION_NAME as \\\"stationBelong\\\" ,\" +\r\n            \"case a.STATUS when 0 then '停用' when 1 then '启用' else '状态错误' end as \\\"status\\\",\" +\r\n            \"a.CREATE_TIME as \\\"createTime\\\",\" +\r\n            \"a.UPDATE_TIME as \\\"updateTime\\\",\" +\r\n            \"c.NAME as \\\"createUserName\\\",\" +\r\n            \"d.NAME as \\\"updateUserName\\\" from TBL_FIELD_INFO a \" +\r\n            \"left join TBL_BASE_STATION_INFO b on b.STATION_ID=a.STATION_BELONG \" +\r\n            \"left join SYS_DB.TBL_USER_INFO c on a.CREATE_USER_ID=c.JOB_NUM \" +\r\n            \"left join SYS_DB.TBL_USER_INFO d on a.CREATE_USER_ID=d.JOB_NUM \" +\r\n            \"where 1=1\" +\r\n            \"<when test='stationBelong != null'> \" +\r\n            \"and a.STATION_BELONG= #{stationBelong} \" +\r\n            \"</when>\"+\r\n            \"<when test='roadBelong != null'> \" +\r\n            \"and a.ROAD_BELONG= #{roadBelong} \" +\r\n            \"</when>\"+\r\n            \"<when test='fieldName != null'> \" +\r\n            \"and a.FIELD_NAME like CONCAT(CONCAT('%',#{fieldName}),'%') \" +\r\n            \"</when>\"+\r\n            \"<when test='type != null'> \" +\r\n            \"and a.TYPE= #{type} \" +\r\n            \"</when>\"+\r\n            \"</script>\"})\r\n    List<Map> selectFieldInfo(@Param(\"stationBelong\") String stationBelong, @Param(\"roadBelong\") String roadBelong, @Param(\"fieldName\") String fieldName, @Param(\"type\") Byte type);\r\n}\r\n
===================================================================
diff --git a/smart-g60/vocational/src/main/java/com/pingok/vocational/mapper/emergency/field/TblFieldInfoMapper.java b/smart-g60/vocational/src/main/java/com/pingok/vocational/mapper/emergency/field/TblFieldInfoMapper.java
--- a/smart-g60/vocational/src/main/java/com/pingok/vocational/mapper/emergency/field/TblFieldInfoMapper.java	
+++ b/smart-g60/vocational/src/main/java/com/pingok/vocational/mapper/emergency/field/TblFieldInfoMapper.java	
@@ -1,47 +1,0 @@
-package com.pingok.vocational.mapper.emergency.field;
-
-import com.pingok.vocational.domain.field.TblFieldInfo;
-import com.ruoyi.common.core.mapper.CommonRepository;
-import org.apache.ibatis.annotations.Param;
-import org.apache.ibatis.annotations.Select;
-
-import java.util.List;
-import java.util.Map;
-
-/**
- * TBL_FIELD_INFO 数据层
- *
- * @author xia
- */
-public interface TblFieldInfoMapper extends CommonRepository<TblFieldInfo> {
-
-    @Select({"<script>" +
-            "select a.ID as \"id\"," +
-            "a.FIELD_NAME as \"fieldName\"," +
-            "case a.TYPE when 1 then '停车场' when 2 then '仓库' when 3 then '机房' else '错误场地类型' end as \"parentCategory\"," +
-            "case a.ROAD_BELONG when '08' then '沪杭' when '09' then '沪渝' when '04' then '沪金' else '其他路段' end as \"roadBelong\" ," +
-            "b.STATION_NAME as \"stationBelong\" ," +
-            "case a.STATUS when 0 then '停用' when 1 then '启用' else '状态错误' end as \"status\"," +
-            "a.CREATE_TIME as \"createTime\"," +
-            "a.UPDATE_TIME as \"updateTime\"," +
-            "c.NAME as \"createUserName\"," +
-            "d.NAME as \"updateUserName\" from TBL_FIELD_INFO a " +
-            "left join TBL_BASE_STATION_INFO b on b.STATION_ID=a.STATION_BELONG " +
-            "left join SYS_DB.TBL_USER_INFO c on a.CREATE_USER_ID=c.JOB_NUM " +
-            "left join SYS_DB.TBL_USER_INFO d on a.CREATE_USER_ID=d.JOB_NUM " +
-            "where 1=1" +
-            "<when test='stationBelong != null'> " +
-            "and a.STATION_BELONG= #{stationBelong} " +
-            "</when>"+
-            "<when test='roadBelong != null'> " +
-            "and a.ROAD_BELONG= #{roadBelong} " +
-            "</when>"+
-            "<when test='fieldName != null'> " +
-            "and a.FIELD_NAME like CONCAT(CONCAT('%',#{fieldName}),'%') " +
-            "</when>"+
-            "<when test='type != null'> " +
-            "and a.TYPE= #{type} " +
-            "</when>"+
-            "</script>"})
-    List<Map> selectFieldInfo(@Param("stationBelong") String stationBelong, @Param("roadBelong") String roadBelong, @Param("fieldName") String fieldName, @Param("type") Byte type);
-}
Index: smart-g60/event/src/main/java/com/pingok/event/domain/TblEventHandle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pingok.event.domain;\r\n\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Table;\r\nimport java.io.Serializable;\r\nimport java.util.Date;\r\n\r\n/**\r\n * 事件处置记录表(TBL_EVENT_HANDLE)\r\n * \r\n * @author bianj\r\n * @version 1.0.0 2022-04-03\r\n */\r\n@Table(name = \"TBL_EVENT_HANDLE\")\r\npublic class TblEventHandle implements Serializable {\r\n    /** 版本号 */\r\n    private static final long serialVersionUID = 1982825010851790253L;\r\n\r\n    /* This code was generated by TableGo tools, mark 1 begin. */\r\n\r\n    /** id */\r\n    @Id\r\n    private Long id;\r\n\r\n    /** 事件ID */\r\n    private Long eventId;\r\n\r\n    /** 处置内容 */\r\n    private String handleContent;\r\n\r\n    /** 处置人id */\r\n    private Long userId;\r\n\r\n    /** 处置时间 */\r\n    private Date handleTime;\r\n\r\n    /** 创建时间 */\r\n    private Date createTime;\r\n\r\n    /* This code was generated by TableGo tools, mark 1 end. */\r\n\r\n    /* This code was generated by TableGo tools, mark 2 begin. */\r\n\r\n    /**\r\n     * 获取id\r\n     * \r\n     * @return id\r\n     */\r\n    public Long getId() {\r\n        return this.id;\r\n    }\r\n\r\n    /**\r\n     * 设置id\r\n     * \r\n     * @param id\r\n     */\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * 获取事件ID\r\n     * \r\n     * @return 事件ID\r\n     */\r\n    public Long getEventId() {\r\n        return this.eventId;\r\n    }\r\n\r\n    /**\r\n     * 设置事件ID\r\n     * \r\n     * @param eventId\r\n     *          事件ID\r\n     */\r\n    public void setEventId(Long eventId) {\r\n        this.eventId = eventId;\r\n    }\r\n\r\n    /**\r\n     * 获取处置内容\r\n     * \r\n     * @return 处置内容\r\n     */\r\n    public String getHandleContent() {\r\n        return this.handleContent;\r\n    }\r\n\r\n    /**\r\n     * 设置处置内容\r\n     * \r\n     * @param handleContent\r\n     *          处置内容\r\n     */\r\n    public void setHandleContent(String handleContent) {\r\n        this.handleContent = handleContent;\r\n    }\r\n\r\n    /**\r\n     * 获取处置人id\r\n     * \r\n     * @return 处置人id\r\n     */\r\n    public Long getUserId() {\r\n        return this.userId;\r\n    }\r\n\r\n    /**\r\n     * 设置处置人id\r\n     * \r\n     * @param userId\r\n     *          处置人id\r\n     */\r\n    public void setUserId(Long userId) {\r\n        this.userId = userId;\r\n    }\r\n\r\n    /**\r\n     * 获取处置时间\r\n     * \r\n     * @return 处置时间\r\n     */\r\n    public Date getHandleTime() {\r\n        return this.handleTime;\r\n    }\r\n\r\n    /**\r\n     * 设置处置时间\r\n     * \r\n     * @param handleTime\r\n     *          处置时间\r\n     */\r\n    public void setHandleTime(Date handleTime) {\r\n        this.handleTime = handleTime;\r\n    }\r\n\r\n    /**\r\n     * 获取创建时间\r\n     * \r\n     * @return 创建时间\r\n     */\r\n    public Date getCreateTime() {\r\n        return this.createTime;\r\n    }\r\n\r\n    /**\r\n     * 设置创建时间\r\n     * \r\n     * @param createTime\r\n     *          创建时间\r\n     */\r\n    public void setCreateTime(Date createTime) {\r\n        this.createTime = createTime;\r\n    }\r\n\r\n    /* This code was generated by TableGo tools, mark 2 end. */\r\n}
===================================================================
diff --git a/smart-g60/event/src/main/java/com/pingok/event/domain/TblEventHandle.java b/smart-g60/event/src/main/java/com/pingok/event/domain/TblEventHandle.java
--- a/smart-g60/event/src/main/java/com/pingok/event/domain/TblEventHandle.java	
+++ b/smart-g60/event/src/main/java/com/pingok/event/domain/TblEventHandle.java	
@@ -8,7 +8,7 @@
 /**
  * 事件处置记录表(TBL_EVENT_HANDLE)
  * 
- * @author bianj
+ * @author qiumin
  * @version 1.0.0 2022-04-03
  */
 @Table(name = "TBL_EVENT_HANDLE")
Index: smart-g60/event/src/main/java/com/pingok/event/domain/TblEventRecord.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pingok.event.domain;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonFormat;\r\n\r\nimport javax.persistence.Id;\r\nimport javax.persistence.Table;\r\nimport java.io.Serializable;\r\nimport java.math.BigDecimal;\r\nimport java.util.Date;\r\n\r\n/**\r\n * 事件记录表(TBL_EVENT_RECORD)\r\n *\r\n * @author bianj\r\n * @version 1.0.0 2022-03-30\r\n */\r\n@Table(name = \"TBL_EVENT_RECORD\")\r\npublic class TblEventRecord implements Serializable {\r\n    /**\r\n     * 版本号\r\n     */\r\n    private static final long serialVersionUID = 4059533038215670574L;\r\n\r\n    /* This code was generated by TableGo tools, mark 1 begin. */\r\n\r\n    /**\r\n     * 主键\r\n     */\r\n    @Id\r\n    private Long id;\r\n\r\n    /**\r\n     * 事件类型\r\n     */\r\n    private String eventType;\r\n\r\n    /**\r\n     * 位置区间\r\n     */\r\n    private String locationInterval;\r\n\r\n    /**\r\n     * 车型\r\n     */\r\n    private Integer vehClass;\r\n\r\n    /**\r\n     * 车牌\r\n     */\r\n    private String vehPlate;\r\n\r\n    /**\r\n     * 车牌颜色\r\n     */\r\n    private Integer vehColor;\r\n\r\n    /**\r\n     * 事件照片\r\n     */\r\n    private String eventPhoto;\r\n\r\n    /**\r\n     * 事件发生时间\r\n     */\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n    private Date eventTime;\r\n\r\n    /**\r\n     * 车速\r\n     */\r\n    private BigDecimal speed;\r\n\r\n    /**\r\n     * 车道\r\n     */\r\n    private String lane;\r\n\r\n    /**\r\n     * 视频\r\n     */\r\n    private String video;\r\n\r\n    /**\r\n     * 确认时间\r\n     */\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n    private Date confirmTime;\r\n\r\n    /**\r\n     * 解除确认时间\r\n     */\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n    private Date relieveTime;\r\n\r\n    /**\r\n     * 确认用户ID\r\n     */\r\n    private Long confirmUserId;\r\n\r\n    /**\r\n     * 解除确认用户ID\r\n     */\r\n    private Long relieveUserId;\r\n\r\n    /**\r\n     * 状态 1-新增 2-已确认 0-已解除\r\n     */\r\n    private Integer status;\r\n\r\n    /** 创建时间 */\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n    private Date createTime;\r\n\r\n    /** 更新时间 */\r\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\r\n    private Date updateTime;\r\n\r\n    /** 创建用户ID */\r\n    private Long createUserId;\r\n\r\n    /** 更新用户ID */\r\n    private Long updateUserId;\r\n\r\n    /* This code was generated by TableGo tools, mark 1 end. */\r\n\r\n    /* This code was generated by TableGo tools, mark 2 begin. */\r\n\r\n    /**\r\n     * 获取主键\r\n     *\r\n     * @return 主键\r\n     */\r\n    public Long getId() {\r\n        return this.id;\r\n    }\r\n\r\n    /**\r\n     * 设置主键\r\n     *\r\n     * @param id 主键\r\n     */\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    /**\r\n     * 获取事件类型\r\n     *\r\n     * @return 事件类型\r\n     */\r\n    public String getEventType() {\r\n        return this.eventType;\r\n    }\r\n\r\n    /**\r\n     * 设置事件类型\r\n     *\r\n     * @param eventType 事件类型\r\n     */\r\n    public void setEventType(String eventType) {\r\n        this.eventType = eventType;\r\n    }\r\n\r\n    /**\r\n     * 获取位置区间\r\n     *\r\n     * @return 位置区间\r\n     */\r\n    public String getLocationInterval() {\r\n        return this.locationInterval;\r\n    }\r\n\r\n    /**\r\n     * 设置位置区间\r\n     *\r\n     * @param locationInterval 位置区间\r\n     */\r\n    public void setLocationInterval(String locationInterval) {\r\n        this.locationInterval = locationInterval;\r\n    }\r\n\r\n    /**\r\n     * 获取车型\r\n     *\r\n     * @return 车型\r\n     */\r\n    public Integer getVehClass() {\r\n        return this.vehClass;\r\n    }\r\n\r\n    /**\r\n     * 设置车型\r\n     *\r\n     * @param vehClass 车型\r\n     */\r\n    public void setVehClass(Integer vehClass) {\r\n        this.vehClass = vehClass;\r\n    }\r\n\r\n    /**\r\n     * 获取车牌\r\n     *\r\n     * @return 车牌\r\n     */\r\n    public String getVehPlate() {\r\n        return this.vehPlate;\r\n    }\r\n\r\n    /**\r\n     * 设置车牌\r\n     *\r\n     * @param vehPlate 车牌\r\n     */\r\n    public void setVehPlate(String vehPlate) {\r\n        this.vehPlate = vehPlate;\r\n    }\r\n\r\n    /**\r\n     * 获取车牌颜色\r\n     *\r\n     * @return 车牌颜色\r\n     */\r\n    public Integer getVehColor() {\r\n        return this.vehColor;\r\n    }\r\n\r\n    /**\r\n     * 设置车牌颜色\r\n     *\r\n     * @param vehColor 车牌颜色\r\n     */\r\n    public void setVehColor(Integer vehColor) {\r\n        this.vehColor = vehColor;\r\n    }\r\n\r\n    /**\r\n     * 获取事件照片\r\n     *\r\n     * @return 事件照片\r\n     */\r\n    public String getEventPhoto() {\r\n        return this.eventPhoto;\r\n    }\r\n\r\n    /**\r\n     * 设置事件照片\r\n     *\r\n     * @param eventPhoto 事件照片\r\n     */\r\n    public void setEventPhoto(String eventPhoto) {\r\n        this.eventPhoto = eventPhoto;\r\n    }\r\n\r\n    /**\r\n     * 获取事件发生时间\r\n     *\r\n     * @return 事件发生时间\r\n     */\r\n    public Date getEventTime() {\r\n        return this.eventTime;\r\n    }\r\n\r\n    /**\r\n     * 设置事件发生时间\r\n     *\r\n     * @param eventTime 事件发生时间\r\n     */\r\n    public void setEventTime(Date eventTime) {\r\n        this.eventTime = eventTime;\r\n    }\r\n\r\n    /**\r\n     * 获取车速\r\n     *\r\n     * @return 车速\r\n     */\r\n    public BigDecimal getSpeed() {\r\n        return this.speed;\r\n    }\r\n\r\n    /**\r\n     * 设置车速\r\n     *\r\n     * @param speed 车速\r\n     */\r\n    public void setSpeed(BigDecimal speed) {\r\n        this.speed = speed;\r\n    }\r\n\r\n    /**\r\n     * 获取车道\r\n     *\r\n     * @return 车道\r\n     */\r\n    public String getLane() {\r\n        return this.lane;\r\n    }\r\n\r\n    /**\r\n     * 设置车道\r\n     *\r\n     * @param lane 车道\r\n     */\r\n    public void setLane(String lane) {\r\n        this.lane = lane;\r\n    }\r\n\r\n    /**\r\n     * 获取视频\r\n     *\r\n     * @return 视频\r\n     */\r\n    public String getVideo() {\r\n        return this.video;\r\n    }\r\n\r\n    /**\r\n     * 设置视频\r\n     *\r\n     * @param video 视频\r\n     */\r\n    public void setVideo(String video) {\r\n        this.video = video;\r\n    }\r\n\r\n    /**\r\n     * 获取确认时间\r\n     *\r\n     * @return 确认时间\r\n     */\r\n    public Date getConfirmTime() {\r\n        return this.confirmTime;\r\n    }\r\n\r\n    /**\r\n     * 设置确认时间\r\n     *\r\n     * @param confirmTime 确认时间\r\n     */\r\n    public void setConfirmTime(Date confirmTime) {\r\n        this.confirmTime = confirmTime;\r\n    }\r\n\r\n    /**\r\n     * 获取解除确认时间\r\n     *\r\n     * @return 解除确认时间\r\n     */\r\n    public Date getRelieveTime() {\r\n        return this.relieveTime;\r\n    }\r\n\r\n    /**\r\n     * 设置解除确认时间\r\n     *\r\n     * @param relieveTime 解除确认时间\r\n     */\r\n    public void setRelieveTime(Date relieveTime) {\r\n        this.relieveTime = relieveTime;\r\n    }\r\n\r\n    /**\r\n     * 获取确认用户ID\r\n     *\r\n     * @return 确认用户ID\r\n     */\r\n    public Long getConfirmUserId() {\r\n        return this.confirmUserId;\r\n    }\r\n\r\n    /**\r\n     * 设置确认用户ID\r\n     *\r\n     * @param confirmUserId 确认用户ID\r\n     */\r\n    public void setConfirmUserId(Long confirmUserId) {\r\n        this.confirmUserId = confirmUserId;\r\n    }\r\n\r\n    /**\r\n     * 获取解除确认用户ID\r\n     *\r\n     * @return 解除确认用户ID\r\n     */\r\n    public Long getRelieveUserId() {\r\n        return this.relieveUserId;\r\n    }\r\n\r\n    /**\r\n     * 设置解除确认用户ID\r\n     *\r\n     * @param relieveUserId 解除确认用户ID\r\n     */\r\n    public void setRelieveUserId(Long relieveUserId) {\r\n        this.relieveUserId = relieveUserId;\r\n    }\r\n\r\n    public Integer getStatus() {\r\n        return status;\r\n    }\r\n\r\n    public void setStatus(Integer status) {\r\n        this.status = status;\r\n    }\r\n    /**\r\n     * 获取创建时间\r\n     *\r\n     * @return 创建时间\r\n     */\r\n    public Date getCreateTime() {\r\n        return this.createTime;\r\n    }\r\n\r\n    /**\r\n     * 设置创建时间\r\n     *\r\n     * @param createTime\r\n     *          创建时间\r\n     */\r\n    public void setCreateTime(Date createTime) {\r\n        this.createTime = createTime;\r\n    }\r\n\r\n    /**\r\n     * 获取更新时间\r\n     *\r\n     * @return 更新时间\r\n     */\r\n    public Date getUpdateTime() {\r\n        return this.updateTime;\r\n    }\r\n\r\n    /**\r\n     * 设置更新时间\r\n     *\r\n     * @param updateTime\r\n     *          更新时间\r\n     */\r\n    public void setUpdateTime(Date updateTime) {\r\n        this.updateTime = updateTime;\r\n    }\r\n\r\n    /**\r\n     * 获取创建用户ID\r\n     *\r\n     * @return 创建用户ID\r\n     */\r\n    public Long getCreateUserId() {\r\n        return this.createUserId;\r\n    }\r\n\r\n    /**\r\n     * 设置创建用户ID\r\n     *\r\n     * @param createUserId\r\n     *          创建用户ID\r\n     */\r\n    public void setCreateUserId(Long createUserId) {\r\n        this.createUserId = createUserId;\r\n    }\r\n\r\n    /**\r\n     * 获取更新用户ID\r\n     *\r\n     * @return 更新用户ID\r\n     */\r\n    public Long getUpdateUserId() {\r\n        return this.updateUserId;\r\n    }\r\n\r\n    /**\r\n     * 设置更新用户ID\r\n     *\r\n     * @param updateUserId\r\n     *          更新用户ID\r\n     */\r\n    public void setUpdateUserId(Long updateUserId) {\r\n        this.updateUserId = updateUserId;\r\n    }\r\n\r\n    /* This code was generated by TableGo tools, mark 2 end. */\r\n}
===================================================================
diff --git a/smart-g60/event/src/main/java/com/pingok/event/domain/TblEventRecord.java b/smart-g60/event/src/main/java/com/pingok/event/domain/TblEventRecord.java
--- a/smart-g60/event/src/main/java/com/pingok/event/domain/TblEventRecord.java	
+++ b/smart-g60/event/src/main/java/com/pingok/event/domain/TblEventRecord.java	
@@ -11,7 +11,7 @@
 /**
  * 事件记录表(TBL_EVENT_RECORD)
  *
- * @author bianj
+ * @author qiumin
  * @version 1.0.0 2022-03-30
  */
 @Table(name = "TBL_EVENT_RECORD")
Index: smart-g60/event/src/main/resources/banner.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Spring Boot Version: ${spring-boot.version}\r\nSpring Application Name: ${spring.application.name}\r\n                            _                           _                    \r\n                           (_)                         | |                   \r\n _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  \r\n| '__|| | | | / _ \\ | | | || ||______|/ __|| | | |/ __|| __| / _ \\| '_ ` _ \\ \r\n| |   | |_| || (_) || |_| || |        \\__ \\| |_| |\\__ \\| |_ |  __/| | | | | |\r\n|_|    \\__,_| \\___/  \\__, ||_|        |___/ \\__, ||___/ \\__| \\___||_| |_| |_|\r\n                      __/ |                  __/ |                           \r\n                     |___/                  |___/                            
===================================================================
diff --git a/smart-g60/event/src/main/resources/banner.txt b/smart-g60/event/src/main/resources/banner.txt
--- a/smart-g60/event/src/main/resources/banner.txt	
+++ b/smart-g60/event/src/main/resources/banner.txt	
@@ -1,10 +1,0 @@
-Spring Boot Version: ${spring-boot.version}
-Spring Application Name: ${spring.application.name}
-                            _                           _                    
-                           (_)                         | |                   
- _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  
-| '__|| | | | / _ \ | | | || ||______|/ __|| | | |/ __|| __| / _ \| '_ ` _ \ 
-| |   | |_| || (_) || |_| || |        \__ \| |_| |\__ \| |_ |  __/| | | | | |
-|_|    \__,_| \___/  \__, ||_|        |___/ \__, ||___/ \__| \___||_| |_| |_|
-                      __/ |                  __/ |                           
-                     |___/                  |___/                            
\ No newline at end of file
Index: smart-g60/data-center/src/main/resources/banner.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Spring Boot Version: ${spring-boot.version}\r\nSpring Application Name: ${spring.application.name}\r\n                            _                           _                    \r\n                           (_)                         | |                   \r\n _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  \r\n| '__|| | | | / _ \\ | | | || ||______|/ __|| | | |/ __|| __| / _ \\| '_ ` _ \\ \r\n| |   | |_| || (_) || |_| || |        \\__ \\| |_| |\\__ \\| |_ |  __/| | | | | |\r\n|_|    \\__,_| \\___/  \\__, ||_|        |___/ \\__, ||___/ \\__| \\___||_| |_| |_|\r\n                      __/ |                  __/ |                           \r\n                     |___/                  |___/                            
===================================================================
diff --git a/smart-g60/data-center/src/main/resources/banner.txt b/smart-g60/data-center/src/main/resources/banner.txt
--- a/smart-g60/data-center/src/main/resources/banner.txt	
+++ b/smart-g60/data-center/src/main/resources/banner.txt	
@@ -1,10 +1,0 @@
-Spring Boot Version: ${spring-boot.version}
-Spring Application Name: ${spring.application.name}
-                            _                           _                    
-                           (_)                         | |                   
- _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  
-| '__|| | | | / _ \ | | | || ||______|/ __|| | | |/ __|| __| / _ \| '_ ` _ \ 
-| |   | |_| || (_) || |_| || |        \__ \| |_| |\__ \| |_ |  __/| | | | | |
-|_|    \__,_| \___/  \__, ||_|        |___/ \__, ||___/ \__| \___||_| |_| |_|
-                      __/ |                  __/ |                           
-                     |___/                  |___/                            
\ No newline at end of file
Index: smart-g60/vocational/src/main/java/com/pingok/vocational/controller/device/vo/TreeSelect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pingok.vocational.controller.device.vo;\r\n\r\nimport com.fasterxml.jackson.annotation.JsonInclude;\r\nimport com.pingok.vocational.domain.device.TblDeviceCategory;\r\nimport com.ruoyi.system.api.domain.SysDept;\r\n\r\nimport java.io.Serializable;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n * Treeselect树结构实体类\r\n * \r\n * @author ruoyi\r\n */\r\npublic class TreeSelect implements Serializable\r\n{\r\n    private static final long serialVersionUID = 1L;\r\n\r\n    /** 节点ID */\r\n    private Long id;\r\n\r\n    /** 节点名称 */\r\n    private String label;\r\n\r\n    /** 子节点 */\r\n    @JsonInclude(JsonInclude.Include.NON_EMPTY)\r\n    private List<TreeSelect> children;\r\n\r\n    public TreeSelect()\r\n    {\r\n\r\n    }\r\n\r\n    public TreeSelect(SysDept dept)\r\n    {\r\n        this.id = dept.getDeptId();\r\n        this.label = dept.getDeptName();\r\n        this.children = dept.getChildren().stream().map(TreeSelect::new).collect(Collectors.toList());\r\n    }\r\n\r\n    public TreeSelect(TblDeviceCategory menu)\r\n    {\r\n        this.id = menu.getId();\r\n        this.label = menu.getCategoryName();\r\n        this.children = menu.getChildren().stream().map(TreeSelect::new).collect(Collectors.toList());\r\n    }\r\n\r\n    public Long getId()\r\n    {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id)\r\n    {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getLabel()\r\n    {\r\n        return label;\r\n    }\r\n\r\n    public void setLabel(String label)\r\n    {\r\n        this.label = label;\r\n    }\r\n\r\n    public List<TreeSelect> getChildren()\r\n    {\r\n        return children;\r\n    }\r\n\r\n    public void setChildren(List<TreeSelect> children)\r\n    {\r\n        this.children = children;\r\n    }\r\n}\r\n
===================================================================
diff --git a/smart-g60/vocational/src/main/java/com/pingok/vocational/controller/device/vo/TreeSelect.java b/smart-g60/vocational/src/main/java/com/pingok/vocational/controller/device/vo/TreeSelect.java
--- a/smart-g60/vocational/src/main/java/com/pingok/vocational/controller/device/vo/TreeSelect.java	
+++ b/smart-g60/vocational/src/main/java/com/pingok/vocational/controller/device/vo/TreeSelect.java	
@@ -1,78 +1,0 @@
-package com.pingok.vocational.controller.device.vo;
-
-import com.fasterxml.jackson.annotation.JsonInclude;
-import com.pingok.vocational.domain.device.TblDeviceCategory;
-import com.ruoyi.system.api.domain.SysDept;
-
-import java.io.Serializable;
-import java.util.List;
-import java.util.stream.Collectors;
-
-/**
- * Treeselect树结构实体类
- * 
- * @author ruoyi
- */
-public class TreeSelect implements Serializable
-{
-    private static final long serialVersionUID = 1L;
-
-    /** 节点ID */
-    private Long id;
-
-    /** 节点名称 */
-    private String label;
-
-    /** 子节点 */
-    @JsonInclude(JsonInclude.Include.NON_EMPTY)
-    private List<TreeSelect> children;
-
-    public TreeSelect()
-    {
-
-    }
-
-    public TreeSelect(SysDept dept)
-    {
-        this.id = dept.getDeptId();
-        this.label = dept.getDeptName();
-        this.children = dept.getChildren().stream().map(TreeSelect::new).collect(Collectors.toList());
-    }
-
-    public TreeSelect(TblDeviceCategory menu)
-    {
-        this.id = menu.getId();
-        this.label = menu.getCategoryName();
-        this.children = menu.getChildren().stream().map(TreeSelect::new).collect(Collectors.toList());
-    }
-
-    public Long getId()
-    {
-        return id;
-    }
-
-    public void setId(Long id)
-    {
-        this.id = id;
-    }
-
-    public String getLabel()
-    {
-        return label;
-    }
-
-    public void setLabel(String label)
-    {
-        this.label = label;
-    }
-
-    public List<TreeSelect> getChildren()
-    {
-        return children;
-    }
-
-    public void setChildren(List<TreeSelect> children)
-    {
-        this.children = children;
-    }
-}
Index: smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/IDeviceInfoService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pingok.monitor.service.deviceInfo;\r\n\r\nimport com.pingok.monitor.domain.deviceInfo.ViewMonitorDeviceInfo;\r\n\r\nimport java.util.List;\r\n\r\n/**\r\n * 设备基础信息 业务层\r\n *\r\n * @author qiumin\r\n */\r\npublic interface IDeviceInfoService {\r\n    List<ViewMonitorDeviceInfo> getInfo();\r\n}\r\n
===================================================================
diff --git a/smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/IDeviceInfoService.java b/smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/IDeviceInfoService.java
--- a/smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/IDeviceInfoService.java	
+++ b/smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/IDeviceInfoService.java	
@@ -1,8 +1,10 @@
 package com.pingok.monitor.service.deviceInfo;
 
 import com.pingok.monitor.domain.deviceInfo.ViewMonitorDeviceInfo;
+import org.apache.ibatis.annotations.Param;
 
 import java.util.List;
+import java.util.Map;
 
 /**
  * 设备基础信息 业务层
@@ -11,4 +13,11 @@
  */
 public interface IDeviceInfoService {
     List<ViewMonitorDeviceInfo> getInfo();
+
+    /**
+     * 根据场地编号查询设备信息及状态
+     * @param fieldNum
+     * @return
+     */
+    List<Map> findByFieldNum(String fieldNum);
 }
Index: smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/impl/DeviceInfoServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pingok.monitor.service.deviceInfo.impl;\r\n\r\nimport com.pingok.monitor.domain.deviceInfo.ViewMonitorDeviceInfo;\r\nimport com.pingok.monitor.mapper.deviceInfo.ViewMonitorDeviceInfoMapper;\r\nimport com.pingok.monitor.service.deviceInfo.IDeviceInfoService;\r\nimport com.ruoyi.common.security.utils.DictUtils;\r\nimport com.ruoyi.system.api.domain.SysDictData;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport tk.mybatis.mapper.entity.Example;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * 设备基础信息 服务层处理\r\n *\r\n * @author qiumin\r\n */\r\n@Service\r\npublic class DeviceInfoServiceImpl implements IDeviceInfoService {\r\n\r\n    @Autowired\r\n    private ViewMonitorDeviceInfoMapper viewMonitorDeviceInfoMapper;\r\n\r\n    @Override\r\n    public List<ViewMonitorDeviceInfo> getInfo() {\r\n        List<ViewMonitorDeviceInfo> monitorDeviceInfos = null;\r\n        List<SysDictData> sysDictDataList = DictUtils.getDictCache(\"monitoring_screen\");\r\n        if (!sysDictDataList.isEmpty() && sysDictDataList.size() > 0) {\r\n            List<String> categoryNames = new ArrayList();\r\n            for (SysDictData s : sysDictDataList) {\r\n                categoryNames.add(s.getDictValue());\r\n            }\r\n            Example example = new Example(ViewMonitorDeviceInfo.class);\r\n            Example.Criteria criteria = example.createCriteria();\r\n            criteria.andIn(\"categoryName\", categoryNames);\r\n            monitorDeviceInfos = viewMonitorDeviceInfoMapper.selectByExample(example);\r\n        }\r\n        return monitorDeviceInfos;\r\n    }\r\n}\r\n
===================================================================
diff --git a/smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/impl/DeviceInfoServiceImpl.java b/smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/impl/DeviceInfoServiceImpl.java
--- a/smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/impl/DeviceInfoServiceImpl.java	
+++ b/smart-g60/monitor/src/main/java/com/pingok/monitor/service/deviceInfo/impl/DeviceInfoServiceImpl.java	
@@ -1,6 +1,7 @@
 package com.pingok.monitor.service.deviceInfo.impl;
 
 import com.pingok.monitor.domain.deviceInfo.ViewMonitorDeviceInfo;
+import com.pingok.monitor.mapper.deviceInfo.TblDeviceStatusMapper;
 import com.pingok.monitor.mapper.deviceInfo.ViewMonitorDeviceInfoMapper;
 import com.pingok.monitor.service.deviceInfo.IDeviceInfoService;
 import com.ruoyi.common.security.utils.DictUtils;
@@ -11,6 +12,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 /**
  * 设备基础信息 服务层处理
@@ -22,6 +24,8 @@
 
     @Autowired
     private ViewMonitorDeviceInfoMapper viewMonitorDeviceInfoMapper;
+    @Autowired
+    private TblDeviceStatusMapper tblDeviceStatusMapper;
 
     @Override
     public List<ViewMonitorDeviceInfo> getInfo() {
@@ -39,4 +43,9 @@
         }
         return monitorDeviceInfos;
     }
+
+    @Override
+    public List<Map> findByFieldNum(String fieldNum) {
+        return tblDeviceStatusMapper.findByFieldNum(fieldNum);
+    }
 }
Index: smart-g60/data-center/src/main/resources/logback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration scan=\"true\" scanPeriod=\"60 seconds\" debug=\"false\">\r\n    <!-- 日志存放路径 -->\r\n\t<property name=\"log.path\" value=\"logs/data-center\" />\r\n   <!-- 日志输出格式 -->\r\n\t<property name=\"log.pattern\" value=\"%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} - [%method,%line] - %msg%n\" />\r\n\r\n    <!-- 控制台输出 -->\r\n\t<appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n\t\t<encoder>\r\n\t\t\t<pattern>${log.pattern}</pattern>\r\n\t\t</encoder>\r\n\t</appender>\r\n\r\n    <!-- 系统日志输出 -->\r\n\t<appender name=\"file_info\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n\t    <file>${log.path}/info.log</file>\r\n        <!-- 循环政策：基于时间创建日志文件 -->\r\n\t\t<rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!-- 日志文件名格式 -->\r\n\t\t\t<fileNamePattern>${log.path}/info.%d{yyyy-MM-dd}.log</fileNamePattern>\r\n\t\t\t<!-- 日志最大的历史 60天 -->\r\n\t\t\t<maxHistory>60</maxHistory>\r\n\t\t</rollingPolicy>\r\n\t\t<encoder>\r\n\t\t\t<pattern>${log.pattern}</pattern>\r\n\t\t</encoder>\r\n\t\t<filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\r\n            <!-- 过滤的级别 -->\r\n            <level>INFO</level>\r\n            <!-- 匹配时的操作：接收（记录） -->\r\n            <onMatch>ACCEPT</onMatch>\r\n            <!-- 不匹配时的操作：拒绝（不记录） -->\r\n            <onMismatch>DENY</onMismatch>\r\n        </filter>\r\n\t</appender>\r\n\r\n    <appender name=\"file_error\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n\t    <file>${log.path}/error.log</file>\r\n        <!-- 循环政策：基于时间创建日志文件 -->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!-- 日志文件名格式 -->\r\n            <fileNamePattern>${log.path}/error.%d{yyyy-MM-dd}.log</fileNamePattern>\r\n\t\t\t<!-- 日志最大的历史 60天 -->\r\n\t\t\t<maxHistory>60</maxHistory>\r\n        </rollingPolicy>\r\n        <encoder>\r\n            <pattern>${log.pattern}</pattern>\r\n        </encoder>\r\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\r\n            <!-- 过滤的级别 -->\r\n            <level>ERROR</level>\r\n\t\t\t<!-- 匹配时的操作：接收（记录） -->\r\n            <onMatch>ACCEPT</onMatch>\r\n\t\t\t<!-- 不匹配时的操作：拒绝（不记录） -->\r\n            <onMismatch>DENY</onMismatch>\r\n        </filter>\r\n    </appender>\r\n\r\n    <!-- 系统模块日志级别控制  -->\r\n\t<logger name=\"com.ruoyi\" level=\"info\" />\r\n\t<!-- Spring日志级别控制  -->\r\n\t<logger name=\"org.springframework\" level=\"warn\" />\r\n\r\n\t<root level=\"info\">\r\n\t\t<appender-ref ref=\"console\" />\r\n\t</root>\r\n\t\r\n\t<!--系统操作日志-->\r\n    <root level=\"info\">\r\n        <appender-ref ref=\"file_info\" />\r\n        <appender-ref ref=\"file_error\" />\r\n    </root>\r\n</configuration>
===================================================================
diff --git a/smart-g60/data-center/src/main/resources/logback.xml b/smart-g60/data-center/src/main/resources/logback.xml
--- a/smart-g60/data-center/src/main/resources/logback.xml	
+++ b/smart-g60/data-center/src/main/resources/logback.xml	
@@ -1,74 +1,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<configuration scan="true" scanPeriod="60 seconds" debug="false">
-    <!-- 日志存放路径 -->
-	<property name="log.path" value="logs/data-center" />
-   <!-- 日志输出格式 -->
-	<property name="log.pattern" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger{20} - [%method,%line] - %msg%n" />
-
-    <!-- 控制台输出 -->
-	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
-		<encoder>
-			<pattern>${log.pattern}</pattern>
-		</encoder>
-	</appender>
-
-    <!-- 系统日志输出 -->
-	<appender name="file_info" class="ch.qos.logback.core.rolling.RollingFileAppender">
-	    <file>${log.path}/info.log</file>
-        <!-- 循环政策：基于时间创建日志文件 -->
-		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
-            <!-- 日志文件名格式 -->
-			<fileNamePattern>${log.path}/info.%d{yyyy-MM-dd}.log</fileNamePattern>
-			<!-- 日志最大的历史 60天 -->
-			<maxHistory>60</maxHistory>
-		</rollingPolicy>
-		<encoder>
-			<pattern>${log.pattern}</pattern>
-		</encoder>
-		<filter class="ch.qos.logback.classic.filter.LevelFilter">
-            <!-- 过滤的级别 -->
-            <level>INFO</level>
-            <!-- 匹配时的操作：接收（记录） -->
-            <onMatch>ACCEPT</onMatch>
-            <!-- 不匹配时的操作：拒绝（不记录） -->
-            <onMismatch>DENY</onMismatch>
-        </filter>
-	</appender>
-
-    <appender name="file_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
-	    <file>${log.path}/error.log</file>
-        <!-- 循环政策：基于时间创建日志文件 -->
-        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
-            <!-- 日志文件名格式 -->
-            <fileNamePattern>${log.path}/error.%d{yyyy-MM-dd}.log</fileNamePattern>
-			<!-- 日志最大的历史 60天 -->
-			<maxHistory>60</maxHistory>
-        </rollingPolicy>
-        <encoder>
-            <pattern>${log.pattern}</pattern>
-        </encoder>
-        <filter class="ch.qos.logback.classic.filter.LevelFilter">
-            <!-- 过滤的级别 -->
-            <level>ERROR</level>
-			<!-- 匹配时的操作：接收（记录） -->
-            <onMatch>ACCEPT</onMatch>
-			<!-- 不匹配时的操作：拒绝（不记录） -->
-            <onMismatch>DENY</onMismatch>
-        </filter>
-    </appender>
-
-    <!-- 系统模块日志级别控制  -->
-	<logger name="com.ruoyi" level="info" />
-	<!-- Spring日志级别控制  -->
-	<logger name="org.springframework" level="warn" />
-
-	<root level="info">
-		<appender-ref ref="console" />
-	</root>
-	
-	<!--系统操作日志-->
-    <root level="info">
-        <appender-ref ref="file_info" />
-        <appender-ref ref="file_error" />
-    </root>
-</configuration>
\ No newline at end of file
Index: smart-g60/device-monitor/src/main/resources/banner.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Spring Boot Version: ${spring-boot.version}\r\nSpring Application Name: ${spring.application.name}\r\n                            _                           _                    \r\n                           (_)                         | |                   \r\n _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  \r\n| '__|| | | | / _ \\ | | | || ||______|/ __|| | | |/ __|| __| / _ \\| '_ ` _ \\ \r\n| |   | |_| || (_) || |_| || |        \\__ \\| |_| |\\__ \\| |_ |  __/| | | | | |\r\n|_|    \\__,_| \\___/  \\__, ||_|        |___/ \\__, ||___/ \\__| \\___||_| |_| |_|\r\n                      __/ |                  __/ |                           \r\n                     |___/                  |___/                            
===================================================================
diff --git a/smart-g60/device-monitor/src/main/resources/banner.txt b/smart-g60/device-monitor/src/main/resources/banner.txt
--- a/smart-g60/device-monitor/src/main/resources/banner.txt	
+++ b/smart-g60/device-monitor/src/main/resources/banner.txt	
@@ -1,10 +1,0 @@
-Spring Boot Version: ${spring-boot.version}
-Spring Application Name: ${spring.application.name}
-                            _                           _                    
-                           (_)                         | |                   
- _ __  _   _   ___   _   _  _  ______  ___  _   _  ___ | |_   ___  _ __ ___  
-| '__|| | | | / _ \ | | | || ||______|/ __|| | | |/ __|| __| / _ \| '_ ` _ \ 
-| |   | |_| || (_) || |_| || |        \__ \| |_| |\__ \| |_ |  __/| | | | | |
-|_|    \__,_| \___/  \__, ||_|        |___/ \__, ||___/ \__| \___||_| |_| |_|
-                      __/ |                  __/ |                           
-                     |___/                  |___/                            
\ No newline at end of file
