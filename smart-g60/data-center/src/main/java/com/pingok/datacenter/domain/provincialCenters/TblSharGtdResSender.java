package com.pingok.datacenter.domain.provincialCenters;

import lombok.Data;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

/**
 * 门架交易记录-省中心(TBL_SHAR_GTD_RES_SENDER)
 *
 * @author bianj
 * @version 1.0.0 2023-02-22
 */
@Data
public class TblSharGtdResSender implements Serializable {
    /**
     * 版本号
     */
    private static final long serialVersionUID = 8534286627529427765L;

    /* This code was generated by TableGo tools, mark 1 begin. */

    /**
     * 计费交易编号（唯一索引） 门架编号+交易批次号+主备卡标记（1-ETC 主、2- ETC 备、3-CPC主、4-CPC 备）+批次内流水号（5位，00001~99999）
     */
    private String tradeId;

    /**
     * 门架编号
     */
    private String gantryId;

    /**
     * 控制器序号 1-主机；2-备机 1；
     */
    private BigDecimal computerOrder;

    /**
     * 小时批次号
     */
    private String hourBatchNo;

    /**
     * 门架顺序号 方向（1 上行，2 下行）+序号（2位），例如：上行：101，102，103；下行：201，202，203
     */
    private BigDecimal gantryOrderNum;

    /**
     * 门架 Hex 值
     */
    private String gantryHex;

    /**
     * 门架类型   1-路段2-省界入口3-省界出口
     */
    private String gantryType;

    /**
     * 对向门架 Hex 值
     */
    private String gantryHexOpposite;

    /**
     * 计费交易时间
     */
    private Date transTime;

    /**
     * 应收金额 单位：分，默认 0。应收金额为优惠前金额
     */
    private BigDecimal payFee;

    /**
     * 交易金额 单位：分，默认 0。交易金额=应收金额-优惠金额
     */
    private BigDecimal fee;

    /**
     * 优惠金额 单位：分，默认 0。优惠金额为优惠减免金额，未优惠填 0；例如：消费 100 元，95 折后，应收金额为 100 元，优惠金额为 5 元，交易金额 95 元。
     */
    private BigDecimal discountFee;

    /**
     * 卡面扣费金额 单位：分，默认 0。如对于储值卡采取 0 元扣费处理，则该字段填写 0，以进行 TAC 验证。
     */
    private BigDecimal transFee;

    /**
     * 通行介质类型 1-OBU（单片式、双片式）2-CPC 卡
     */
    private BigDecimal mediaType;

    /**
     * OBU 单/双片标识 通行介质类型填写 1 时，必填。1-单片式 OBU 2-双片式 OBU
     */
    private BigDecimal obuSign;

    /**
     * 收费单元编号组合 收费单元编号+处理标识，用于ETC 复合消费或者 CPC 计费，若有代收或者拟合用“|”间隔，其中处理标识定义为 0-默认 1-本门架2-没有前序门架的代收（代收门架为未建设或维护抢修） 3-拟合前序门架的代收（“上个门架-代收门架-本门架”的路径可确定为唯一路径）4-最短路径处理 5-最小费额处理，如：“G0015320030015201|G0015320030015203”
     */
    private String tollIntervalId;

    /**
     * 应收金额组合 收费单元应收金额（优惠前金额）组合，用于 ETC 复合消费或者 CPC计费，单位：分，若有代收或者拟合用“|”分隔。如 ：“1000|2000”表示按照 tollIntervalIDs 中先后出现的两个收费单元分别应收费（优惠前）10 元和 20 元。
     */
    private String payFeeGroup;

    /**
     * 交易金额组合  交易金额（应收金额减去优惠金额）组合，用于 ETC 复合消费或者CPC 计费，单位：分，若有代收或者拟合用“|”分隔。如 ：“800|1300”表示按照tollIntervalIDs 中先后出现的两个收费单元交易金额分别为 8 元和 13元。
     */
    private String feeGroup;

    /**
     * 优惠金额组合  收费单元优惠金额组合，用于 ETC复合消费或者 CPC 计费，单位：分，若有代收或者拟合用“|”分隔。如 ：“200|700”表示按照tollIntervalIDs 中先后出现的两个收费单元分别应优惠 2 元和 7 元。
     */
    private String discountFeeGroup;

    /**
     * 计费车辆车牌号码+颜色
     */
    private String vehiclePlate;

    /**
     * 入口车型  入口写入 0019 默认 0 1-一型客车2-二型客车3-三型客车4-四型客车11-一型货车12-二型货车13-三型货车14-四型货车15-五型货车16-六型货车21-一型专项作业车22-二型专项作业车23-三型专项作业车是24-四型专项作业车25-五型专项作业车26-六型专项作业车
     */
    private BigDecimal vehicleType;

    /**
     * 识别的车型 入口写入 0019 默认 0 1-一型客车2-二型客车3-三型客车4-四型客车11-一型货车12-二型货车13-三型货车14-四型货车15-五型货车16-六型货车21-一型专项作业车22-二型专项作业车23-三型专项作业车是24-四型专项作业车25-五型专项作业车26-六型专项作业车
     */
    private BigDecimal identifyVehicleType;

    /**
     * 车种
     */
    private BigDecimal vehicleClass;

    /**
     * 车辆状态标识 本字段由收费车道或 ETC 门架填写0x00-大件运输（交易成功时有效）0x01-非优惠车0x02-绿通车0x03-联合收割机0x04-集装箱车0x05-0xfe 预留0xff 为默认值
     */
    private String vehicleSign;

    /**
     * TAC 码
     */
    private String tac;

    /**
     * 交易类型标识  PBOC 定义，如 06 为传统交易，09 为复合交易。计费成功必填。
     */
    private String transType;

    /**
     * 终端机编号 PSAM 中 0016 文件中的终端机编号。计费成功必填。
     */
    private String terminalNo;

    /**
     * PSAM 卡脱机交易序列号
     */
    private String terminalTransNo;

    /**
     * IC 卡交易序号
     */
    private BigDecimal transNo;

    /**
     * 交易的服务类型 TC 计费成功必填。1 位数字：1-公路电子收费
     */
    private BigDecimal serviceType;

    /**
     * 算法标识  ETC 计费成功必填。1 位数字1-3DEX 2-SM4
     */
    private BigDecimal algorithmIdentifier;

    /**
     * 消费密钥版本号
     */
    private String keyVersion;

    /**
     * 天线 ID 编号 从左侧车道顺序编号（超车道 1 开始），其他值类推
     */
    private BigDecimal antennaId;

    /**
     * 计费模块和计费参数版本号  计费模块和计费参数版本号
     */
    private String rateVersion;

    /**
     * 交易耗时  单位：ms,交易成功时必填
     */
    private BigDecimal consumeTime;

    /**
     * 通行状态  1-有入口；2-无入口
     */
    private BigDecimal passState;

    /**
     * 入口车道编号 按照编码规则的收费车道编号规则填写
     */
    private String enTollLaneId;

    /**
     * 入口站hex字符串
     */
    private String enTollStationHex;

    /**
     * 入口交易发生的时间
     */
    private Date enTime;

    /**
     * 入口车道类型  参见 0019 文件第 14 字节例如:01-混合（ETC+MTC）03-ETC 专用
     */
    private String enLaneType;

    /**
     * 通行标识 ID  ETC 长度从 30 为调整为 36 位； （1）“01“+”卡网络编号“+”用户卡编号“+”卡内入口时间“，计费使用 （2）“00“+”0000“+” OBU 序号编码“+”OBU 内入口时间“， 例如：011101220000000000469520200212154317 000000110000000000611420200212210435 CPC 车辆通行标识 passId，格式为“02“+”0000“+” CPC 卡编码“+”入口时间“，例如：020000230101650003487720200216112931
     */
    private String passId;

    /**
     * 上一个门架的 hex编号
     */
    private String lastGantryHex;

    /**
     * 通过上一个门架的时间
     */
    private Date lastGantryTime;

    /**
     * OBU /CPC 物理地址
     */
    private String obumac;

    /**
     * OBU/CPC 发行方标识
     */
    private String obuIssueId;

    /**
     * OBU/CPC 序号编码
     */
    private String obusn;

    /**
     * OBU/CPC 版本号 OBU 的 EF01 系统信息文件的合同版本；CPC 的 EF01 系统信息文件的版本号
     */
    private BigDecimal obuVersion;

    /**
     * OBU/CPC 起始日期
     */
    private BigDecimal obuStartDate;

    /**
     * OBU/CPC 截止日期
     */
    private BigDecimal obuEndDate;

    /**
     * OBU/CPC 卡电量百分比 单片式 OBU 和 CPC 卡处理必填。填写 0-100，若无法读数或读数异常时填-1
     */
    private BigDecimal obuElectrical;

    /**
     * OBU/CPC 状态
     */
    private String obuState;

    /**
     * OBU 内车牌号码 标签内发行的车牌号码+间隔符+车牌颜色，间隔符：“_”
     */
    private String obuVehiclePlate;

    /**
     * OBU 内车型  EF01 第 15 字节
     */
    private BigDecimal obuVehicleType;

    /**
     * 车辆用户类型  ETC 应用车辆信息文件中规定
     */
    private BigDecimal vehicleUserType;

    /**
     * 车辆座位数/载重  ETC 车辆座位数/车辆载重(单位：kg)
     */
    private BigDecimal vehicleSeat;

    /**
     * 车轴数  大于等于 2,货车必填
     */
    private BigDecimal axleCount;

    /**
     * 车货总重 单位：kg
     */
    private BigDecimal totalWeight;

    /**
     * 车辆长  单位：dm
     */
    private BigDecimal vehicleLength;

    /**
     * 车辆宽  单位：dm
     */
    private BigDecimal vehicleWidth;

    /**
     * 车辆高  单位：dm
     */
    private BigDecimal vehicleHight;

    /**
     * CPU 卡片网络编号  2 字节，省级行政区划代码（1 字节）+运营商序号（1 字节）
     */
    private String cpuNetId;

    /**
     * CPU 卡片发行方标识  字节，区域代码（4 字节）+运营商标识（2 字节）+保留（1 字节）+密钥分散标识（1字节）
     */
    private String cpuIssueId;

    /**
     * CPU 内车牌号码  CPU 发行的车牌号码+间隔符+车牌颜色（非 4X 版本车牌颜色无效），间隔符：“_”
     */
    private String cpuVehiclePlate;

    /**
     * CPU 内车型
     */
    private String cpuVehicleType;

    /**
     * CPU 起始日期
     */
    private BigDecimal cpuStartDate;

    /**
     * CPU 截止日期
     */
    private BigDecimal cpuEndDate;

    /**
     * CPU 用户卡版本号
     */
    private BigDecimal cpuVersion;

    /**
     * CPU 卡类型  0-默认值1-储值卡否2-记账卡
     */
    private BigDecimal cpuCardType;

    /**
     * CPU 卡编号
     */
    private String cpuCardId;

    /**
     * 交易前余额  单位：分，双片式标签交易前余额
     */
    private BigDecimal balanceBefore;

    /**
     * 交易后余额   单位：分，双片式标签交易后余额
     */
    private BigDecimal balanceAfter;

    /**
     * CPC 卡过站信息数量  CPC 卡 EF02 文件中过站信息中写入的门架数量
     */
    private BigDecimal gantryPassCount;

    /**
     * CPC 卡的过站信息
     */
    private String gantryPassInfo;

    /**
     * CPC 卡省内计费信息
     */
    private String feeProvInfo;

    /**
     * CPC 卡本省费用累计前金额
     */
    private BigDecimal feeSumLocalBefore;

    /**
     * CPC 卡本省费用累计后金额
     */
    private BigDecimal feeSumLocalAfter;

    /**
     * 计费接口特情值  具体见计费接口错误定义默认值 -1
     */
    private BigDecimal feeCalcSpecial;

    /**
     * 计费模块响应计费结果  负数为异常，具体见计费接口错误定义1-未调用（默认值）0-正常；
     */
    private BigDecimal feeCalcResult;

    /**
     * 计费信息 1
     */
    private String feeInfo1;

    /**
     * 计费信息 2
     */
    private String feeInfo2;

    /**
     * 计费信息 3
     */
    private String feeInfo3;

    /**
     * 本次交易前标签累计应收金额
     */
    private BigDecimal obuPayFeeSumBefore;

    /**
     * 本次交易后标签累计应收金额
     */
    private BigDecimal obuPayFeeSumAfter;

    /**
     * 本次交易前标签累计优惠金额
     */
    private BigDecimal obuDiscountFeeSumBefore;

    /**
     * 本次交易前后标签累计优惠金额
     */
    private BigDecimal obuDiscountFeeSumAfter;

    /**
     * 本次交易前标签累计实收金额（省内）
     */
    private BigDecimal obuProvfeeSumBefore;

    /**
     * 本次交易后标签累计实收金额（省内）
     */
    private BigDecimal obuProvfeeSumAfter;

    /**
     * 本次交易前卡片累计金额
     */
    private BigDecimal cardfeeSumBefore;

    /**
     * 本次交易后卡片累计金额
     */
    private BigDecimal cardfeeSumAfter;

    /**
     * 本次交易前累计无卡次数
     */
    private BigDecimal noCardTimesBefore;

    /**
     * 本次交易后累计无卡次数
     */
    private BigDecimal noCardTimesAfter;

    /**
     * 本次交易前累计省份数量
     */
    private BigDecimal provinceNumBefore;

    /**
     * 本次交易后累计省份数量
     */
    private BigDecimal provinceNumAfter;

    /**
     * 本次交易前标签累计写入成功总量
     */
    private BigDecimal obuTotalTradeSuccNumBefore;

    /**
     * 本次交易后标签累计写入成功总量
     */
    private BigDecimal obuTotalTradeSuccNumAfter;

    /**
     * 省内本次交易前标签累计写入成功数量ETC 本次交易前标签累计交易成功次数（省内）；CPC 本次交易前卡片累计门架个数（省内）默认值 -1
     */
    private BigDecimal obuProvTradeSuccNumBefore;

    /**
     * 省内本次交易后标签累计写入成功数量ETC 本次交易后标签累计交易成功次数（省内）；CPC 本次交易前卡片累计门架个数（省内）默认值 -1
     */
    private BigDecimal obuProvTradeSuccNumAfter;

    /**
     * 标签交易结  默认值 -1 0-成功1-失败
     */
    private BigDecimal obuTradeResult;

    /**
     * 交易类型 默认值 -1 0-复合消费+标签写卡 1-仅标签交易2-仅复合消费
     */
    private BigDecimal tradeType;

    /**
     * 读取标签入口信息类型  默认值 -1 0- AA 1- BB 2- CC 3-其他
     */
    private BigDecimal obuInfoTypeRead;

    /**
     * 本次写入标签入口信息类型 默认值 -1 0- AA 1- BB 2- CC
     */
    private BigDecimal obuInfoTypeWrite;

    /**
     * 标签入口状态  默认值 -1 1-有入口 2-无入口
     */
    private BigDecimal obuPassState;

    /**
     * 计费车型  默认值 -1 计费模块计费时使用的车型
     */
    private BigDecimal feeVehicleType;

    /**
     * OBU 中上一个门架 HEX
     */
    private String obuLastGantryHex;

    /**
     * OBU 中通过上一个门架时间
     */
    private Date obuLastGantryTime;

    /**
     * 计费里程数
     */
    private BigDecimal feeMileage;

    /**
     * 本次交易前标签  单位:米默认-1累计里程
     */
    private BigDecimal obuMileageBefore;

    /**
     * 本次交易前标签累计里程  单位:米默认-1
     */
    private BigDecimal obuMileageAfter;

    /**
     * 本次交易读取的EF04 加密摘要  本次交易读取的 EF04 加密摘要
     */
    private String tradeReadCiphertext;

    /**
     * 本次交易读取的EF04 加密摘要验证结果   本次交易读取的 EF04 加密摘要验证结果默认值 -1 0- 成功 1- 失败
     */
    private BigDecimal readCiphertextVerify;

    /**
     * 本次交易生成的EF04 加密摘要   本次交易生成的 EF04 加密摘要
     */
    private String tradeWriteCiphertext;

    /**
     * 本省累计通行金额参考  省界出口计费模块输出的用于参考的本省累计通行金额 provMinFee（最大长度 20） 省界出口可与本省收费站入口或省界入口门架至省界的最短路径、最小费额等进行比较，仅作为本省累计通行金额的参考，供异常分析使用。默认-1
     */
    private BigDecimal provMinFee;

    /**
     * 计费协议保留字段 1
     */
    private BigDecimal feeSpare1;

    /**
     * 计费协议保留字段 2
     */
    private BigDecimal feeSpare2;

    /**
     * 计费协议保留字段 3
     */
    private String feeSpare3;

    /**
     * 本省计费起点  ETC 同标签 EF04 文件中的本省入口编码，CPC 同 EF02 文件中的本省入口ETC 门架信息中的 3 字节 ETC 门架编码
     */
    private String feeProvBeginHex;

    /**
     * 计费模块计费模式   默认值-1 1-无拟合路径路劲2-拟合路径计费成功必填
     */
    private BigDecimal rateCompute;

    /**
     * 计费模块拟合点总数
     */
    private BigDecimal rateFitCount;

    /**
     * 本次交易前标签累计实收金额
     */
    private BigDecimal obuFeeSumBefore;

    /**
     * 本次交易后标签累计实收金额
     */
    private BigDecimal obuFeeSumAfter;

    /**
     * 本次交易前标签累计应收金额（省内）
     */
    private BigDecimal obuProvPayFeeSumBefore;

    /**
     * 本次交易后标签累计应收金额（省内）
     */
    private BigDecimal obuProvPayFeeSumAfter;

    /**
     * 本次计费拟合结果标识  默认值-1 0- 未拟合或拟合成功1- 拟合失败
     */
    private BigDecimal pathFitFlag;

    /**
     * 计费特情值组合
     */
    private String feeCalcSpecials;

    /**
     * 本省累计金额取整  ETC 表示本省累计应收金额取整（含本门架应收金额）。CPC 表示本省累计金额取整（含本门架计费金额），对应计费模块返回的 payFeeProvSumLocal 字段默认值-1
     */
    private BigDecimal payFeeProvSumLocal;

    /**
     * PC-RSU 接口协议版本号
     */
    private BigDecimal pcRsuVersion;

    /**
     * 本次写入的 CPC卡 EF02 文件中过站信息
     */
    private String gantryPassInfoAfter;

    /**
     * 更新过站信息结果 1-更新成功；2-更新失败弃用保留
     */
    private BigDecimal updateResult;

    /**
     * PC 卡计费信息文件写入结果  默认值-1 0- 成功 1- 失败
     */
    private BigDecimal cpcFeeTradeResult;

    /**
     * 本次写入到 CPC EF04 中本省计费信息
     */
    private String feeProvEf04;

    /**
     * CPC 卡是否进行全省路径拟合的标识
     */
    private BigDecimal fitProvFlag;

    /**
     * CPC 卡 EF02 文件中过站信息中门架数量
     */
    private BigDecimal gantryPassCountBefore;

    /**
     * 拟合后的本省省界入口 ETC 门架HEX 码
     */
    private String feeProvBeginHexFit;

    /**
     * 拟合后的本省省界入口 ETC 门架的通行时间
     */
    private Date feeProvBeginTimeFit;

    /**
     * 节假日状态  0 非节假日；1-节假日, 交易成功必填
     */
    private BigDecimal holidayState;

    /**
     * 卡片复合交易结果
     */
    private BigDecimal tradeResult;

    /**
     * 计费文件中上一个门架的hex编号
     */
    private String lastGantryHexFee;

    /**
     * 过站信息中上一个门架的hex编号
     */
    private String lastGantryHexPass;

    /**
     * 门架特情类型
     */
    private String specialType;

    /**
     * 收费特情类型
     */
    private String chargesSpecialType;

    /**
     * 校验码
     */
    private String verifyCode;

    /**
     * 干扰信号  1-无干扰2-存在干扰
     */
    private BigDecimal interruptSignal;

    /**
     * 车牌识别流水号
     */
    private String vehiclePicId;

    /**
     * 车牌识别流水号（车尾）
     */
    private String vehicleTailPicId;

    /**
     * 匹配状态  0-未处理（默认）；1-有匹配结果；2-无匹配结果；3-反向数据
     */
    private BigDecimal matchStatus;

    /**
     * 去重状态  0-未处理（默认）；1-有效数据；2-无效(重复)数据
     */
    private BigDecimal validStatus;

    /**
     * 处理状态  0-未处理（默认）；1-已处理
     */
    private BigDecimal dealStatus;

    /**
     * 是否修正过  0-未修正（默认）；1-修正过
     */
    private BigDecimal isFixData;

    /**
     * 交易成功关联流水号
     */
    private String relatedTradeId;

    /**
     * 全部关联流水号
     */
    private String allRelatedTradeId;

    /**
     * 门架后台入库时间
     */
    private Date stationDbTime;

    /**
     * 门架后台处理时间
     */
    private Date stationDealTime;

    /**
     * 门架后台去重时间
     */
    private Date stationValidTime;

    /**
     * 门架后台匹配时间
     */
    private Date stationMatchTime;

    private String year;

}